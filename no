#include <iostream>
#include <cmath>
#include <stack>
#include <vector>
#include <cstring>
#include <fstream>
#include "tgaimage.h"

using namespace std;

const TGAColor white = TGAColor(255, 255, 255, 255);
const TGAColor red = TGAColor(255, 0, 0, 255);

void line(int x1, int y1, int x2, int y2, TGAImage &image, TGAColor color) //Alg_Brez modif+
{
	int deltaX = abs(x2 - x1);
	int deltaY = abs(y2 - y1);
	int signX = x1 < x2 ? 1 : -1;
	int signY = y1 < y2 ? 1 : -1;
	int error = deltaX - deltaY;
	image.set(x2, y2, color);
	while (x1 != x2 || y1 != y2)
	{
		image.set(x1, y1, color);
		if (error * 2 > -deltaY)
		{
			error -= deltaY;
			x1 += signX;
			continue;
		}
		if (error * 2 < deltaX)
		{
			error += deltaX;
			y1 += signY;
			continue;
		}
	}
}

int main()
{
	TGAImage image(2000, 2500, TGAImage::RGB);
	double r = - 0.8;
	ifstream in;
	char str[255];
	char *p, *context1, *context2, *v1, *v2, *v3, *f1, *f2, *f3;
	double a1 = 0, a2 = 0, a3 = 0;
	int b1 = 0, b2 = 0, b3 = 0;
	in.open("african_head.obj");
	int k = 0;
	while (!(in.eof()))
	{
		in.getline(str, 255);
		if (str[0] == 'v') k++;
	}
	in.close();
	int** arrk = new int*[k];
	for (int i = 0; i < k; i++)
		arrk[i] = new int[4];
	for (int i = 0; i < k; i++)
		for (int j = 0; j < 4; j++)
			arrk[i][j] = 0;
	in.open("african_head.obj");
	int l = 0;
	while (!(in.eof()))
	{
		in.getline(str, 255);
		if (str[0] == 'f') l++;
	}
	in.close();
	int** arrl = new int*[l];
	for (int i = 0; i < l; i++)
		arrl[i] = new int[3];
	for (int i = 0; i < l; i++)
		for (int j = 0; j < 3; j++)
			arrl[i][j] = 0;
	in.open("african_head.obj");
	int i = 0;

	while (!(in.eof()))
	{
		in.getline(str, 255);
		if (str[0] == 'v')
		{
			p = strtok_s(str, " ", &context1);
			v1 = strtok_s(NULL, " ", &context1);
			v2 = strtok_s(NULL, " ", &context1);
			v3 = strtok_s(NULL, " ", &context1);
			a1 = atof(v1), a2 = atof(v2), a3 = atof(v3);
			arrk[i][0] = int(a1 / (r * a3 + 1) * 1000), arrk[i][1] = int(a2 / (r * a3 + 1) * 1000), arrk[i][2] = int(a3 / (r * a3 + 1) * 1000);
			arrk[i][3] = 1;
			i++;
		}
	}

	in.close();
	in.open("african_head.obj");
	int j = 0;
	while (!(in.eof()))
	{
		in.getline(str, 255);
		if (str[0] == 'f')
		{
			p = strtok_s(str, " ", &context1);
			f1 = strtok_s(NULL, " ", &context1);
			f2 = strtok_s(NULL, " ", &context1);
			f3 = strtok_s(NULL, " ", &context1);
			b1 = atoi(strtok_s(f1, "/", &context2)), b2 = atoi(strtok_s(f2, "/", &context2)), b3 = atoi(strtok_s(f3, "/", &context2));
			arrl[j][0] = b1, arrl[j][1] = b2, arrl[j][2] = b3;
			j++;
		}
	}
	in.close();

	double koord1[4][4];
	double koord2[4][4];
	double koord3[4][4];
	double koord4[4][4];
	double koord[4][4];

	for(int i=0; i<4; i++)
		for(int j=0; j<0; j++)
		{
			koord1[i][j] = 0;
			koord2[i][j] = 0;
			koord3[i][j] = 0;
			koord4[i][j] = 0;
			koord[i][j] = 0;
		}

		double phiz = 0;//0 z
		double phiy = 0.523599;//30 y
		double phix = 0.349066;//20 x

		koord1[0][0] = cos(phiz);
		koord1[0][1] = sin(phiz);
		koord1[1][0] = -sin(phiz);
		koord1[1][1] = cos(phiz);
		koord1[2][2] = 1;
		koord1[3][3] = 1;

		koord2[0][0] = cos(phiy);
		koord2[0][2] = sin(phiy);
		koord2[2][0] = -sin(phiy);
		koord2[2][2] = cos(phiy);
		koord2[1][1] = 1;
		koord2[3][3] = 1;

		koord3[1][1] = cos(phix);
		koord3[1][2] = sin(phix);
		koord3[2][1] = -sin(phix);
		koord3[2][2] = cos(phix);
		koord3[0][0] = 1;
		koord3[3][3] = 1;

		koord4[0][0] = 1;
		koord4[1][1] = 1;
		koord4[2][2] = 1;
		koord4[3][3] = 1;
		koord4[2][3] = r;

		for (int i = 0; i < 4; ++i)
			for (int j = 0; j < 4; j++)
			{
				int s = 0;//obnulenie peremennoi
				for (int r = 0; r < 4; r++)
					s += koord1[i][r] * koord2[r][j];//formula
				koord[i][j] = s;//zapolnenie massiva
			}

			
		for (int i = 0; i < 4; ++i)
			for (int j = 0; j < 4; j++)
				koord1[i][j] = koord[i][j];

		for (int i = 0; i < 4; ++i)
			for (int j = 0; j < 4; j++)
			{
				int s = 0;//obnulenie peremennoi
				for (int r = 0; r < 4; r++)
					s += koord1[i][r] * koord3[r][j];//formula
				koord[i][j] = s;//zapolnenie massiva
			}

			
		for (int i = 0; i < 4; ++i)
			for (int j = 0; j < 4; j++)
				koord1[i][j] = koord[i][j];

		for (int i = 0; i < 4; ++i)
			for (int j = 0; j < 4; j++)
			{
				int s = 0;//obnulenie peremennoi
				for (int r = 0; r < 4; r++)
					s += koord1[i][r] * koord4[r][j];//formula
				koord[i][j] = s;//zapolnenie massiva
			}

double kx = koord[0][0] + koord[1][0] + koord[2][0] + koord[3][0];
double ky = koord[0][1] + koord[1][1] + koord[2][1] + koord[3][1];
double kz = koord[0][2] + koord[1][2] + koord[2][2] + koord[3][2];
double kw = koord[0][3] + koord[1][3] + koord[2][3] + koord[3][3];

	for (int i = 0; i < l; i++)
	{
		int p1 = arrl[i][0] - 1, p2 = arrl[i][1] - 1, p3 = arrl[i][2] - 1;
		int xA = arrk[p1][0]*kx + 1000, yA = arrk[p1][1]*ky + 1000;
		int xB = arrk[p2][0]*kx + 1000, yB = arrk[p2][1]*ky + 1000;
		int xC = arrk[p3][0]*kx + 1000, yC = arrk[p3][1]*ky + 1000;
		line(xA, yA, xB, yB, image, white);
		cout << i << "/" << l << " wait..." << endl;
	}

	image.flip_vertically();
	image.write_tga_file("output.tga");

	for (int i = 0; i < k; i++)
		delete[] arrk[i];
	delete[] arrk;
	for (int i = 0; i < l; i++)
		delete[] arrl[i];
	delete[] arrl;

	//system("pause");
	return 0;
}
