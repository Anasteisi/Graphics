#include <iostream>
#include <cmath>

//colormine.org/color-converter

using namespace std;

double minimum(double a, double b, double c)
{
	double min = a;
	if (b < min) min = b;
	if (c < min) min = c;
	return min;
}

double maximum(double a, double b, double c)
{
	double max = a;
	if (b > max) max = b;
	if (c > max) max = c;
	return max;
}

void rgbtocmy (double *r, double *g, double *b, double *c, double *m, double *y)//+
{
	*c = (255 - *r) / 255;
	*m = (255 - *g) / 255;
	*y = (255 - *b) / 255;
}

void cmytorgb(double *c, double *m, double *y, double *r, double *g, double *b)//+
{
	*r = 255 - *c*255;
	*g = 255 - *m*255;
	*b = 255 - *y*255;
}

void rgbtocmyk(double *r, double *g, double *b, double *c, double *m, double *y, double *k)//+
{
	*c = (255 - *r)/255;
	*m = (255 - *g)/255;
	*y = (255 - *b)/255;
	*k = 1;

	if (*c < *k) *k = *c;
	if (*m < *k) *k = *m;
	if (*y < *k) *k = *y;
	if (*k == 1) *c = 0, *m = 0, *y = 0;
	else
		*c = (*c - *k) / (1 - *k), *m = (*m - *k ) / (1 - *k), *y = (*y - *k) / (1 - *k);
}

void cmyktorgb(double *c, double *m, double *y, double *k, double *r, double *g, double *b)//+
{
	*c = *c * (1 - *k) + *k;
	*m = *m * (1 - *k) + *k;
	*y = *y * (1 - *k) + *k;
	*r = 255 - *c * 255;
	*g = 255 - *m * 255;
	*b = 255 - *y * 255;
}

void rgbtohsv(double *r, double *g, double *b, double *h, double *s, double *v)//+
{
	*r /= 255, *g /= 255, *b /= 255;
	double min = minimum(*r, *g, *b);
	double max = maximum(*r, *g, *b);
	*v = max;
	if (max == 0) *s = 0;
	else *s = (max - min) / max;
	if (max == min) *h = 0;
	if (*r == max && *g >= *b) *h = 60 * (*g - *b) / (max - min);
	if (*r == max && *g < *b) *h = 60 * (*g - *b) / (max - min) + 360;
	if (*g == max) *h = 60 * (*b - *r) / (max - min) + 120;
	if (*b == max) *h = 60 * (*r - *g) / (max - min) + 240;
}

void hsvtorgb(double *h, double *s, double *v, double *r, double *g, double *b)//+
{
	*s *= 100, *v *= 100;
	int hi;
	double a, vmin, vinc, vdec;
	hi = int(*h / 60) % 6;
	vmin = *v*(100 - *s) / 100;
	a = (*v - vmin) * (*h-int(*h)/60*60) / 60;
	vinc = vmin + a;
	vdec = *v - a;
	switch (hi)
	{
	case(0):
		*r = *v, *g = vinc, *b = vmin;
		break;
	case(1):
		*r = vdec, *g = *v, *b = vmin;
		break;
	case(2):
		*r = vmin, *g = *v, *b = vinc;
		break;
	case(3):
		*r = vmin, *g = vdec, *b = *v;
		break;
	case(4):
		*r = vinc, *g = vmin, *b = *v;
		break;
	default:
		*r = *v, *g = vmin, *b = vdec;
		break;
	}
	*r *= 2.55, *g *= 2.55, *b *= 2.55;
}

void rgbtohsl(double *r, double *g, double *b, double *h, double *s, double *l)//+ 
{
	*r /= 255, *g /= 255, *b /= 255;
	double min = minimum(*r, *g, *b);
	double max = maximum(*r, *g, *b);
	*l = (max + min) / 2;
	if (max == min || *l == 0) s = 0;
	else
		if (*l <= 0.5)
			*s = (max - min) / (*l * 2);
		else
			*s = (max - min) / (2 - *l * 2);
	if (max == min) *h = -10000;
	if (*r == max && *g >= *b) *h = 60 * (*g - *b) / (max - min);
	if (*r == max && g < b) *h = 60 * (*g - *b) / (max - min) + 360;
	if (*g == max) *h = 60 * (*b - *r) / (max - min) + 120;
	if (*b == max) *h = 60 * (*r - *g) / (max - min) + 240;
	*s *= 100, *l *= 100;
}

double h_in_hsltorgb(double p, double q, double tc)//+
{
	if (tc < 0) tc += 1;
	if (tc > 1) tc -= 1;
	if (tc * 6 < 1) return (p + (q - p) * 6 * tc);
	else
		if (tc * 2 < 1) return q;
		else
			if (tc * 3 < 2) return (p + (q - p) * ((2 / 3) - tc) * 6);
			else return p;
}

void hsltorgb(double *h, double *s, double *l, double *r, double *g, double *b)//+
{
	*s /= 100, *l /= 100;
	double q, p, hk, tr, tg, tb;
	if (*l < 0.5) q = *l*(1 + *s);
	else q = *l + *s - *l* *s;
	p = 2 * *l - q;
	hk = *h / 360;
	tr = hk + 0.33333333, tg = hk, tb = hk - 0.33333333;

	*r = 255 * h_in_hsltorgb(p, q, tr);
	*g = 255 * h_in_hsltorgb(p, q, tg);
	*b = 255 * h_in_hsltorgb(p, q, tb);
}

void rgbtoxyz(double *r, double *g, double *b, double *x, double *y, double *z)//+
{
	*r /= 255, *g /= 255, *b /= 255;
	if (*r > 0.04045) *r = pow(((*r + 0.055) / 1.055), 2.4);
	else *r = *r / 12.92;
	if (*g > 0.04045) *g = pow(((*g + 0.055) / 1.055), 2.4);
	else *g = *g / 12.92;
	if (*b > 0.04045) *b = pow(((*b + 0.055) / 1.055), 2.4);
	else *b = *b / 12.92;
	*r *= 100, *g *= 100, *b *= 100;
	*x = *r * 0.4124 + *g * 0.3576 + *b * 0.1805;
	*y = *r * 0.2126 + *g * 0.7152 + *b * 0.0722;
	*z = *r * 0.0193 + *g * 0.1192 + *b * 0.9505;
}

void xyztorgb(double *x, double *y, double *z, double *r, double *g, double *b)//+
{
	*x /= 100, *y /= 100, *z /= 100;
	*r = *x * 3.2406 - *y * 1.5372 - *z * 0.4986;
	*g = -*x * 0.9689 + *y * 1.8758 + *z * 0.0415;
	*b = *x * 0.0557 - *y * 0.2040 + *z * 1.0570;
	if (*r > 0.0031308) *r = 1.055 * pow(*r, 0.41666667) - 0.055;
	else *r = 12.92 * *r;
	if (*g > 0.0031308) *g = 1.055 * pow(*g, 0.41666667) - 0.055;
	else *g = 12.92 * *g;
	if (*b > 0.0031308) *b = 1.055 * pow(*b, 0.41666667) - 0.055;
	else *b = 12.92 * *b;

	*r *= 255, *g *= 255, *b *= 255;
	*r = int(*r), *g = int(*g), *b = int(*b);
}

int *main()
{
	double r = 0, g = 0, b = 0, c = 0, m = 0, y = 0, k = 0, h = 0, s = 0, v = 0, l = 0, x = 0, z = 0;
	double r1 = 0, g1 = 0, b1 = 0, c1 = 0, m1 = 0, y1 = 0, k1 = 0, h1 = 0, s1 = 0, v1 = 0, l1 = 0, x1 = 0, z1 = 0;
	bool stop = false;
	while (stop != true)
	{
		int ch = 0;
		cout << "Stop -- 0; From: " << endl;
		cout << "RGB -- 1, CMY -- 2, CMYK -- 3, HSV -- 4, HSL -- 5" << endl;
		cin >> ch;
		if (ch == 0)
			stop = true;
		if (ch == 1)//1!!!
		{
			cout << "Enter R[0,255], G[0,255], B[0,255]:" << endl;
			cin >> r >> g >> b;
			r1 = r, g1 = g, b1 = b;
			cout << "RGB: " << r1 << " " << g1 << " " << b1 << endl;
			rgbtocmy(&r1, &g1, &b1, &c1, &m1, &y1);
			cout << "CMY: " << c1 << " " << m1 << " " << y1 << endl;
			r1 = r, g1 = g, b1 = b;
			rgbtocmyk(&r1, &g1, &b1, &c1, &m1, &y1, &k1);
			cout << "CMYK: " << c1 << " " << m1 << " " << y1 << " " << k1 << endl;
			r1 = r, g1 = g, b1 = b;
			rgbtohsv(&r1, &g1, &b1, &h1, &s1, &v1);
			cout << "HSV: " << h1 << " " << s1 << " " << v1 << endl;
			r1 = r, g1 = g, b1 = b;
			rgbtohsl(&r1, &g1, &b1, &h1, &s1, &l1);
			cout << "HSL: " << h1 << " " << s1 << " " << l1 << endl;
			r1 = r, g1 = g, b1 = b;
			rgbtoxyz(&r1, &g1, &b1, &x1, &y1, &z1);
			cout << "XYZ: " << x1 << " " << y1 << " " << z1 << endl;
		}//1!!!

		if (ch == 2)//2!!!
		{
			cout << "Enter C[0,1], M[0,1], Y[0,1]:" << endl;
			cin >> c >> m >> y;
			c1 = c, m1 = m, y1 = y;
			cout << "CMY: " << c1 << " " << m1 << " " << y1 << endl;
			cmytorgb(&c1, &m1, &y1, &r1, &g1, &b1);
			cout << "RGB: " << r1 << " " << g1 << " " << b1 << endl;
			c1 = c, m1 = m, y1 = y;
			cmytorgb(&c1, &m1, &y1, &r1, &g1, &b1);
			rgbtocmyk(&r1, &g1, &b1, &c1, &m1, &y1, &k1);
			cout << "CMYK: " << c1 << " " << m1 << " " << y1 << " " << k1 << endl;
			c1 = c, m1 = m, y1 = y;
			cmytorgb(&c1, &m1, &y1, &r1, &g1, &b1);
			rgbtohsv(&r1, &g1, &b1, &h1, &s1, &v1);
			cout << "HSV: " << h1 << " " << s1 << " " << v1 << endl;
			c1 = c, m1 = m, y1 = y;
			cmytorgb(&c1, &m1, &y1, &r1, &g1, &b1);
			rgbtohsl(&r1, &g1, &b1, &h1, &s1, &l1);
			cout << "HSL: " << h1 << " " << s1 << " " << l1 << endl;
			c1 = c, m1 = m, y1 = y;
			cmytorgb(&c1, &m1, &y1, &r1, &g1, &b1);
			rgbtoxyz(&r1, &g1, &b1, &x1, &y1, &z1);
			cout << "XYZ: " << x1 << " " << y1 << " " << z1 << endl;
		}

		if (ch == 3)//3!!!
		{
			cout << "Enter C[0,1], M[0,1], Y[0,1], K[0,1]:" << endl;
			cin >> c >> m >> y >> k;
			c1 = c, m1 = m, y1 = y, k1 = k;
			cout << "CMYK: " << c1 << " " << m1 << " " << y1 << " " << k1 << endl;
			cmyktorgb(&c1, &m1, &y1, &k1, &r1, &g1, &b1);
			cout << "RGB: " << r1 << " " << g1 << " " << b1 << endl;
			c1 = c, m1 = m, y1 = y, k1 = k;
			cmyktorgb(&c1, &m1, &y1, &k1, &r1, &g1, &b1);
			rgbtocmy(&r1, &g1, &b1, &c1, &m1, &y1);
			cout << "CMY: " << c1 << " " << m1 << " " << y1 << endl;
			c1 = c, m1 = m, y1 = y, k1 = k;
			cmyktorgb(&c1, &m1, &y1, &k1, &r1, &g1, &b1);
			rgbtohsv(&r1, &g1, &b1, &h1, &s1, &v1);
			cout << "HSV: " << h1 << " " << s1 << " " << v1 << endl;
			c1 = c, m1 = m, y1 = y, k1 = k;
			cmyktorgb(&c1, &m1, &y1, &k1, &r1, &g1, &b1);
			rgbtohsl(&r1, &g1, &b1, &h1, &s1, &l1);
			cout << "HSL: " << h1 << " " << s1 << " " << l1 << endl;
			c1 = c, m1 = m, y1 = y, k1 = k;
			cmyktorgb(&c1, &m1, &y1, &k1, &r1, &g1, &b1);
			rgbtoxyz(&r1, &g1, &b1, &x1, &y1, &z1);
			cout << "XYZ: " << x1 << " " << y1 << " " << z1 << endl;
		}

		if (ch == 4)//4!!!
		{
			cout << "Enter H[0,360], S[0,1], V[0,1]" << endl;
			cin >> h >> s >> v;
			h1 = h, s1 = s, v1 = v;
			hsvtorgb(&h1, &s1, &v1, &r1, &g1, &b1);
			rgbtohsv(&r1, &g1, &b1, &h1, &s1, &v1);
			cout << "HSV: " << h1 << " " << s1 << " " << v1 << endl;
			h1 = h, s1 = s, v1 = v;
			hsvtorgb(&h1, &s1, &v1, &r1, &g1, &b1);
			cout << "RGB: " << r1 << " " << g1 << " " << b1 << endl;
			h1 = h, s1 = s, v1 = v;
			hsvtorgb(&h1, &s1, &v1, &r1, &g1, &b1);
			rgbtocmy(&r1, &g1, &b1, &c1, &m1, &y1);
			cout << "CMY: " << c1 << " " << m1 << " " << y1 << endl;
			h1 = h, s1 = s, v1 = v;
			hsvtorgb(&h1, &s1, &v1, &r1, &g1, &b1);
			rgbtocmyk(&r1, &g1, &b1, &c1, &m1, &y1, &k1);
			cout << "CMYK: " << c1 << " " << m1 << " " << y1 << " " << k1 << endl;
			h1 = h, s1 = s, v1 = v;
			hsvtorgb(&h1, &s1, &v1, &r1, &g1, &b1);
			rgbtohsl(&r1, &g1, &b1, &h1, &s1, &l1);
			cout << "HSL: " << h1 << " " << s1 << " " << l1 << endl;
			h1 = h, s1 = s, v1 = v;
			hsvtorgb(&h1, &s1, &v1, &r1, &g1, &b1);
			rgbtoxyz(&r1, &g1, &b1, &x1, &y1, &z1);
			cout << "XYZ: " << x1 << " " << y1 << " " << z1 << endl;
		}

		if (ch == 5)//5!!!
		{
			cout << "Enter H[0,360], S[0,100], L[0,100]" << endl;
			cin >> h >> s >> l;
			h1 = h, s1 = s, l1 = l;
			cout << "HSL: " << h1 << " " << s1 << " " << l1 << endl;
			hsltorgb(&h1, &s1, &l1, &r1, &g1, &b1);
			cout << "RGB: " << r1 << " " << g1 << " " << b1 << endl;
			h1 = h, s1 = s, l1 = l;
			hsltorgb(&h1, &s1, &l1, &r1, &g1, &b1);
			rgbtocmy(&r1, &g1, &b1, &c1, &m1, &y1);
			cout << "CMY: " << c1 << " " << m1 << " " << y1 << endl;
			h1 = h, s1 = s, l1 = l;
			hsltorgb(&h1, &s1, &l1, &r1, &g1, &b1);
			rgbtocmyk(&r1, &g1, &b1, &c1, &m1, &y1, &k1);
			cout << "CMYK: " << c1 << " " << m1 << " " << y1 << " " << k1 << endl;
			h1 = h, s1 = s, l1 = l;
			hsltorgb(&h1, &s1, &l1, &r1, &g1, &b1);
			rgbtohsv(&r1, &g1, &b1, &h1, &s1, &v1);
			cout << "HSV: " << h1 << " " << s1 << " " << v1 << endl;
			h1 = h, s1 = s, l1 = l;
			hsltorgb(&h1, &s1, &l1, &r1, &g1, &b1);
			rgbtoxyz(&r1, &g1, &b1, &x1, &y1, &z1);
			cout << "XYZ: " << x1 << " " << y1 << " " << z1 << endl;
		}
	}//stop

	system("pause");
	return 0;
}
