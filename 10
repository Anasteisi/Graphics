#include <iostream>
#include <cmath>
#include <stack>
#include <vector>
#include <cstring>
#include <fstream>
#include "tgaimage.h"

using namespace std;

int round(double val) 
{
	if (val < 0)
		if ((abs(val) - abs(int(val))) < 0.5)
			return int(val);
		else
			return int(val)-1;
	else
		if ((val - int(val) < 0.5))
			return int(val);
		else
			return int(val)+1;
}

/*
void line(int x1, int y1, int x2, int y2, TGAImage &image, TGAColor color)
{
int deltaX = abs(x2 - x1);
int deltaY = abs(y2 - y1);
int signX = x1 < x2 ? 1 : -1;
int signY = y1 < y2 ? 1 : -1;
image.set(x2, y2, color);
if (deltaX > deltaY)
{
int error = 2 * deltaY - deltaX;
while (x1 != x2)
{
image.set(x1, y1, color);
if (error < 0) error += 2 * deltaY;
else error += 2 * deltaY - 2 * deltaX, y1 += signY;
x1 += signX;
}
}
else
{
int error = 2 * deltaX - deltaY;
while (y1 != y2)
{
image.set(x1, y1, color);
if (error < 0) error += 2 * deltaX;
else error += 2 * deltaX - 2 * deltaY, x1 += signX;
y1 += signY;
}
}
}*/

struct Pixel
{
	int x, y, z;
};

struct Rebro
{
	int x1, y1, z1, x2, y2, z2;
};

const TGAColor white = TGAColor(255, 255, 255, 255);
const TGAColor red = TGAColor(255, 0, 0, 255);

int main()
{
	TGAImage image(3000, 3000, TGAImage::RGB);
	ifstream in;
	char str[255];
	char *p, *context1, *context2, *v1, *v2, *v3, *f1, *f2, *f3;
	double a1 = 0, a2 = 0, a3 = 0, b1 = 0, b2 = 0, b3 = 0;
	in.open("african_head.obj");
	int k = 0;//kolichestvo v (tochek)
	while (!(in.eof()))
	{
		in.getline(str, 255);
		if (str[0] == 'v' && str[1] == ' ') k++;
	}
	in.close();
	double** arrk = new double*[k];
	for (int i = 0; i < k; i++)
		arrk[i] = new double[4];
	for (int i = 0; i < k; i++)
		for (int j = 0; j < 4; j++)
			arrk[i][j] = 0;
	in.open("african_head.obj");
	int l = 0;//kolichestvo f (treugol'nikov)
	while (!(in.eof()))
	{
		in.getline(str, 255);
		if (str[0] == 'f') l++;
	}
	in.close();
	int** arrl = new int*[l];
	for (int i = 0; i < l; i++)
		arrl[i] = new int[3];
	for (int i = 0; i < l; i++)
		for (int j = 0; j < 3; j++)
			arrl[i][j] = 0;
	in.open("african_head.obj");
	int i = 0;
	while (!(in.eof()))
	{
		in.getline(str, 255);
		if (str[0] == 'v' && str[1] == ' ')
		{
			p = strtok_s(str, " ", &context1);
			v1 = strtok_s(NULL, " ", &context1);
			v2 = strtok_s(NULL, " ", &context1);
			v3 = strtok_s(NULL, " ", &context1);
			a1 = atof(v1), a2 = atof(v2), a3 = atof(v3);
			arrk[i][0] = a1, arrk[i][1] = a2, arrk[i][2] = a3;
			arrk[i][3] = 1;
			i++;
		}
	}
	in.close();
	in.open("african_head.obj");
	int j = 0;
	while (!(in.eof()))
	{
		in.getline(str, 255);
		if (str[0] == 'f')
		{
			p = strtok_s(str, " ", &context1);
			f1 = strtok_s(NULL, " ", &context1);
			f2 = strtok_s(NULL, " ", &context1);
			f3 = strtok_s(NULL, " ", &context1);
			b1 = atoi(strtok_s(f1, "/", &context2)), b2 = atoi(strtok_s(f2, "/", &context2)), b3 = atoi(strtok_s(f3, "/", &context2));
			arrl[j][0] = b1, arrl[j][1] = b2, arrl[j][2] = b3;
			j++;
		}
	}
	in.close();

	double **ZBufer = new double *[3000];
	for (int i = 0; i < 3000; ++i)
		ZBufer[i] = new double[3000];

	for (int i = 0; i < 3000; i++)
		for (j = 0; j < 3000; j++)
			ZBufer[i][j] = -30000;

	for (int i = 0; i < k; i++)
	{
		int xpoz = 1500 + (int)(1500 * arrk[i][0]);
		int ypoz = 1500 + (int)(1500 * arrk[i][1]);
		int zpoz = 1500 + (int)(1500 * arrk[i][2]);
		if (ZBufer[xpoz][ypoz] < zpoz) ZBufer[xpoz][ypoz] = zpoz;
	}

	for (int i = 0; i < l; i++)
	{
		int p1 = arrl[i][0] - 1, p2 = arrl[i][1] - 1, p3 = arrl[i][2] - 1;
		int xA = 1500 + (int)(1500 * arrk[p1][0]), yA = 1500 + (int)(1500 * arrk[p1][1]), zA = 1500 + (int)(1500 * arrk[p1][2]);
		int xB = 1500 + (int)(1500 * arrk[p2][0]), yB = 1500 + (int)(1500 * arrk[p2][1]), zB = 1500 + (int)(1500 * arrk[p2][2]);
		int xC = 1500 + (int)(1500 * arrk[p3][0]), yC = 1500 + (int)(1500 * arrk[p3][1]), zC = 1500 + (int)(1500 * arrk[p3][2]);

		Rebro R1, R2, R3;
		R1.x1 = xA, R1.x2 = xB, R1.y1 = yA, R1.y2 = yB, R1.z1 = zA, R1.z2 = zB;
		R2.x1 = xB, R2.x2 = xC, R2.y1 = yB, R2.y2 = yC, R2.z1 = zB, R2.z2 = zC;
		R3.x1 = xC, R3.x2 = xA, R3.y1 = yC, R3.y2 = yA, R3.z1 = zC, R3.z2 = zA;

		vector <Pixel> list1, list2, list3;
		Pixel Z;
		Z.z = 0;

		int deltaX = abs(R1.x2 - R1.x1);
		int deltaY = abs(R1.y2 - R1.y1);
		int deltaZ = abs(R1.z2 - R1.z1);
		int signX = R1.x1 < R1.x2 ? 1 : -1;
		int signY = R1.y1 < R1.y2 ? 1 : -1;
		int signZ = R1.z1 < R1.z2 ? 1 : -1;
		if (ZBufer[R1.x1][R1.y1] < R1.z1) ZBufer[R1.x1][R1.y1] = R1.z1;
		if (ZBufer[R1.x2][R1.y2] < R1.z2) ZBufer[R1.x2][R1.y2] = R1.z2;
		Z.x = R1.x1, Z.y = R1.y1, Z.z = R1.z1;
		list1.push_back(Z);
		int kolZ = deltaX > deltaY ? deltaX : deltaY;
		double lyambda = 0;
		if (deltaX > deltaY)
		{
			int error = 2 * deltaY - deltaX;
			while (R1.x1 != R1.x2)
			{
				if (error < 0) error += 2 * deltaY;
				else error += 2 * deltaY - 2 * deltaX, R1.y1 += signY;
				R1.x1 += signX;
				lyambda += (double)(deltaZ / kolZ);
				R1.z1 = zA + signZ * round(lyambda);
				if (ZBufer[R1.x1][R1.y1] < R1.z1) ZBufer[R1.x1][R1.y1] = R1.z1;
				Z.x = R1.x1, Z.y = R1.y1, Z.z = R1.z1;
				list1.push_back(Z);
			}
		}
		else
		{
			int error = 2 * deltaX - deltaY;
			while (R1.y1 != R1.y2)
			{
				if (error < 0) error += 2 * deltaX;
				else error += 2 * deltaX - 2 * deltaY, R1.x1 += signX;
				R1.y1 += signY;
				lyambda += (double)(deltaZ / kolZ);
				R1.z1 = zA + signZ * round(lyambda);
				if (ZBufer[R1.x1][R1.y1] < R1.z1) ZBufer[R1.x1][R1.y1] = R1.z1;
				Z.x = R1.x1, Z.y = R1.y1, Z.z = R1.z1;
				list1.push_back(Z);
			}
		}

		deltaX = abs(R2.x2 - R2.x1);
		deltaY = abs(R2.y2 - R2.y1);
		deltaZ = abs(R2.z2 - R2.z1);
		signX = R2.x1 < R2.x2 ? 1 : -1;
		signY = R2.y1 < R2.y2 ? 1 : -1;
		signZ = R2.z1 < R2.z2 ? 1 : -1;
		if (ZBufer[R2.x1][R2.y1] < R2.z1) ZBufer[R2.x1][R2.y1] = R2.z1;
		if (ZBufer[R2.x2][R2.y2] < R2.z2) ZBufer[R2.x2][R2.y2] = R2.z2;
		Z.x = R2.x1, Z.y = R2.y1, Z.z = R2.z1;
		list2.push_back(Z);
		kolZ = deltaX > deltaY ? deltaX : deltaY;
		lyambda = 0;
		if (deltaX > deltaY)
		{
			int error = 2 * deltaY - deltaX;
			while (R2.x1 != R2.x2)
			{
				if (error < 0) error += 2 * deltaY;
				else error += 2 * deltaY - 2 * deltaX, R2.y1 += signY;
				R2.x1 += signX;
				lyambda += (double)(deltaZ / kolZ);
				R2.z1 = zB + signZ * round(lyambda);
				if (ZBufer[R2.x1][R2.y1] < R2.z1) ZBufer[R2.x1][R2.y1] = R2.z1;
				Z.x = R2.x1, Z.y = R2.y1, Z.z = R2.z1;
				list2.push_back(Z);
			}
		}
		else
		{
			int error = 2 * deltaX - deltaY;
			while (R2.y1 != R2.y2)
			{
				if (error < 0) error += 2 * deltaX;
				else error += 2 * deltaX - 2 * deltaY, R2.x1 += signX;
				R2.y1 += signY;
				lyambda += (double)(deltaZ / kolZ);
				R2.z1 = zB + signZ * round(lyambda);
				if (ZBufer[R2.x1][R2.y1] < R2.z1) ZBufer[R2.x1][R2.y1] = R2.z1;
				Z.x = R2.x1, Z.y = R2.y1, Z.z = R2.z1;
				list2.push_back(Z);
			}
		}

		deltaX = abs(R3.x2 - R3.x1);
		deltaY = abs(R3.y2 - R3.y1);
		deltaZ = abs(R3.z2 - R3.z1);
		signX = R3.x1 < R3.x2 ? 1 : -1;
		signY = R3.y1 < R3.y2 ? 1 : -1;
		signZ = R3.z1 < R3.z2 ? 1 : -1;
		if (ZBufer[R3.x1][R3.y1] < R3.z1) ZBufer[R3.x1][R3.y1] = R3.z1;
		if (ZBufer[R3.x2][R3.y2] < R3.z2) ZBufer[R3.x2][R3.y2] = R3.z2;
		Z.x = R3.x1, Z.y = R3.y1, Z.z = R3.z1;
		list3.push_back(Z);
		kolZ = deltaX > deltaY ? deltaX : deltaY;
		lyambda = 0;
		if (deltaX > deltaY)
		{
			int error = 2 * deltaY - deltaX;
			while (R3.x1 != R3.x2)
			{
				if (error < 0) error += 2 * deltaY;
				else error += 2 * deltaY - 2 * deltaX, R3.y1 += signY;
				R3.x1 += signX;
				lyambda += (double)(deltaZ / kolZ);
				R2.z1 = zC + signZ * round(lyambda);
				if (ZBufer[R3.x1][R3.y1] < R3.z1) ZBufer[R3.x1][R3.y1] = R3.z1;
				Z.x = R3.x1, Z.y = R3.y1, Z.z = R3.z1;
				list3.push_back(Z);
			}
		}
		else
		{
			int error = 2 * deltaX - deltaY;
			while (R3.y1 != R3.y2)
			{
				if (error < 0) error += 2 * deltaX;
				else error += 2 * deltaX - 2 * deltaY, R3.x1 += signX;
				R3.y1 += signY;
				lyambda += (double)(deltaZ / kolZ);
				R2.z1 = zC + signZ * round(lyambda);
				if (ZBufer[R3.x1][R3.y1] < R3.z1) ZBufer[R3.x1][R3.y1] = R3.z1;
				Z.x = R3.x1, Z.y = R3.y1, Z.z = R3.z1;
				list3.push_back(Z);
			}
		}
		
		vector<Pixel> fulllist;
		fulllist.insert(fulllist.end(), list1.begin(), list1.end());
		fulllist.insert(fulllist.end(), list2.begin(), list2.end());
		fulllist.insert(fulllist.end(), list3.begin(), list3.end());

		for (int i = 1; i < fulllist.size(); i++)
			for (int j = 0; j < fulllist.size() - i; j++)
				if (fulllist[j].y > fulllist[j + 1].y)
					swap(fulllist[j], fulllist[j + 1]);

		for (int i = 1; i < fulllist.size(); i++)
			for (int j = 0; j < fulllist.size() - i; j++)
				if (fulllist[j].y == fulllist[j + 1].y && fulllist[j].x > fulllist[j + 1].x)
					swap(fulllist[j], fulllist[j + 1]);

		Pixel Point1, Point2;
		while (!fulllist.empty())
		{
			Point1 = fulllist.back();
			fulllist.pop_back();
			if (!fulllist.empty())
			{
				Point2 = fulllist.back(), fulllist.pop_back();

				deltaX = abs(Point2.x - Point1.x);
				deltaY = abs(Point2.y - Point1.y);
				deltaZ = abs(Point2.z - Point1.z);
				signX = Point2.x > Point1.x ? 1 : -1;
				signY = Point2.y > Point1.y ? 1 : -1;
				signZ = Point2.z > Point1.z ? 1 : -1;
				kolZ = deltaX > deltaY ? deltaX : deltaY;
				lyambda = 0;

				if (deltaX == 0 && deltaY == 0)
				{
					if (Point1.z < Point2.z) ZBufer[Point1.x][Point1.y] = Point2.z;
					else ZBufer[Point1.x][Point1.y] = Point1.z;
					
				}
				else
				{
					int tmpZ = Point1.z;
					if (deltaX > deltaY)
					{
						int error = 2 * deltaY - deltaX;
						while (Point1.x != Point2.x)
						{
							if (error < 0) error += 2 * deltaY;
							else error += 2 * deltaY - 2 * deltaX, Point1.y += signY;
							Point1.x += signX;
							if (kolZ != 0) lyambda += (double)(deltaZ / kolZ);
							Point1.z = tmpZ + signZ * round(lyambda);
							if (ZBufer[Point1.x][Point1.y] < Point1.z) ZBufer[Point1.x][Point1.y] = Point1.z;
						}
					}
					else
					{
						int error = 2 * deltaX - deltaY;
						while (Point1.y != Point2.y)
						{
							if (error < 0) error += 2 * deltaX;
							else error += 2 * deltaX - 2 * deltaY, Point1.x += signX;
							Point1.y += signY;
							if (kolZ != 0) lyambda += (double)(deltaZ / kolZ);
							Point1.z = tmpZ + signZ * round(lyambda);
							if (ZBufer[Point1.x][Point1.y] < Point1.z) ZBufer[Point1.x][Point1.y] = Point1.z;
						}
					}
				}
			}//if (!fulllist.empty())
			else
				if (ZBufer[Point1.x][Point1.y] < Point1.z) ZBufer[Point1.x][Point1.y] = Point1.z;
		}//while (!fulllist.empty())
		cout << "wait: " << i << "/" << l << endl;
	}//for (int i = 0; i < l; i++)
	

	int I = 0;

	for (int i = 0; i < 3000; i++)
		for (int j = 0; j < 3000; j++)
			if (ZBufer[i][j] != -30000)
			{
				//cout << ZBufer[i][j] << endl;
				I = round(ZBufer[i][j] * 255 / 3000);
				TGAColor Col = TGAColor(I, I, I, I);
				image.set(i, j, Col);
			}

	image.flip_vertically();
	image.write_tga_file("output.tga");

	for (int i = 0; i < k; i++)
		delete[] arrk[i];
	delete[] arrk;
	for (int i = 0; i < l; i++)
		delete[] arrl[i];
	delete[] arrl;

	system("pause");
	return 0;
}
